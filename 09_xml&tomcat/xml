1 xml：
    可扩展标签语言
    标签自定义
    作用：存储数据，各种语言都可以用（配置文件）
    书写规范：
        区分大小写。
        应该有一个根标签。
        标签必须关闭。
        属性值必须用引号引起来。
        标签体中的空格或者换行或者制表符等内容都是作为数据内容存在的，不会像html那样忽略空格。
        特殊字符必须转义。
    满足上述规范的文件，称为格式良好的xml文件，可以通过浏览器浏览

    后缀名 xml

2.组成部分：
    声明：
        告诉别人这是一个xml文件
        格式：<?xml...........?>  (自动生成）
        第一行顶格写，不能有空格

    元素（标签）：
        <xx></xx>
        <xx/>
        必须关闭
        标签名不能以xml，Xml,XML等等开头
        标签名不能出现空格或冒号等特殊字符
    属性：
        <xx 属性名="属性值"/>
        属性必须用引号引起来
    注释：
        html一样  <!--  -->
    CDATA：
        特数字符必须转义

3.解析xml文件
    解析方式：
        sax解析：逐行解析，只能查询，不支持增删改操作
        dom解析：一次性将文档加载到内存中，形成一个dom树，进行增删改查 crud
    解析技术：
        JAXP:sun公司提供支持DOM和SAX开发包（几乎不用）
        JDom:dom4j兄弟
        jsoup:一种处理HTML特定解析开发包
        dom4j:比较常用的解析开发包，hibernate底层采用。(掌握）

    dom4j技术进行查询操作
        使用步骤
            导入jar包
            创建一个核心对象 SAXReader
                SAXReader reader=new SAXReader();
            将xml文档加载到内存中形成一棵树
                Document doc=reader.read(文件);
            获取根节点
                Element root=doc.getRootElement();
            通过根节点获取其他节点（文本节点，属性节点，元素节点）
                List<Element> list=.root.elements();

    获取元素的指定属性内容
        String value =element.attribute("属性名");

    获取标签体
        String content=element.elementText("子标签名称");


4.xPath解析技术(扩展)
    依赖于dom4j
    使用步骤
        导入jar包
        加载xml文件到内存中
        使用api
            selectNode("表达式")
            selectSingleNode("表达式")
            表达式的写法
                nodename 选取此节点的所有子节点
                /  从根节点选取
                    基本的XPath语法类似于在一个文件系统中定位文件,
                    如果路径以斜线 / 开始, 那么该路径就表示到一个元素的绝对路径

                // 从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置
                    如果路径以双斜线 // 开头,
                     则表示选择文档中所有满足双斜线//之后规则的元素(无论层级关系)

                .  选取当前节点

                .. 选取当前节点的父节点

                @  选取属性
                    属性的值可以被用来作为选择的准则,
                     normalize-space函数删除了前部和尾部的空格,
                    并且把连续的空格串替换为一个单一的空格
                    //BBB[@id='b1']
                    //BBB[@name='bbb']
                    //BBB[normalize-space(@name)='bbb']

                * 星号 * 表示选择所有由星号之前的路径所定位的元素
                    /AAA/CCC/DDD/*

                [] 方块号里的表达式可以进一步的指定元素,
                    其中数字表示元素在选择集里的位置,
                     而last()函数则表示选择集中的最后一个元素.
                     /AAA/BBB[1]
                     /AAA/BBB[last()]

                count()函数
                     count()函数可以计数所选元素的个数
                    //*[count(BBB)=2] 选择含有2个BBB子元素的元素
                    //*[count(*)=2] 选择含有2个子元素的元素
                    //*[count(*)=3] 选择含有3个子元素的元素

                name()函数
                name()函数返回元素的名称,
                start-with()函数在该函数的第一个参数字符串是以第二个参数字符开始的情况返回true,
                contains()函数当其第一个字符串参数包含有第二个字符串参数时返回true.



5.为了保证数据的有效性和完整性——xml约束
    作用：为了规定xml可以出现哪些元素及属性，及他们出现的顺序
        就是为了防止用户瞎写

    约束分类：
        DTD约束：struts、hibernate等等会用到
        SCHEMA约束：tomcat、spring等等会用到


6.DTD约束
    一个xml中只能添加一个DTD约束
    和xml的关联：
        方式1：
            内部关联
            格式：<!DOCTYPE 根元素名 [dtd语法]>
        方式2：
            外部关联-系统关联
            格式：<!DOCTYPE 根元素名 SYSTEM "约束文件位置">
        方式3：
            外部关联-公共关联
            格式：<!DOCTYPE 根元素名 PUBLIC "约束文件名称" "约束文件位置">


    dtd语法：
        元素：
            <!Element 元素名称 数据类型|包含内容>
         例如 <!Element servlet-name (#PCDATA)>
            数据类型：
                #PCDATA普通文本类型 一般用()包起来
            包含内容：
                该元素下可以出现哪些元素 用()包起来
            符号：
                * 出现任意次
                ？出现一次或零次
                + 出现至少1次
                | 或者
                () 分组
                ，顺序

        属性：
            格式：
                <!ATTLIST 元素名 属性名 属性类型 属性是否必须出现>

            属性类型：
                ID：唯一
                CDATA：普通文本
            属性是否必须出现
                REQUIRED：必须出现
                IMPLIED：可以不出现
7.schema约束：
    本身也是一个xml文件
    一个xml可以添加多个scheme约束
    xml和schema关联：
        格式：<根标签 xmlns[:别名]="..." ...>
        xmlns:名称空间 xml namespace 可以关联约束文件和规定元素来源于哪个约束文件


