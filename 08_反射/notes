                        类加载器
1 类的加载
    当程序要使用某个类时，如果该类还未被加载到内存中，则系统会通过加载、连接
    初始化三个步骤来实现对这个类的初始化。
    加载：
        将class文件读入内存，并为之创建一个Class对象。
        任何类被使用时系统都会建立一个Class对象
    连接：
        验证 是否有正确的内部结构，并和其他类协调一致
        准备 负责为类的静态成员分配内存，并设置默认初始化值
        解析 将类的二进制数据中的符号引用替换为直接引用
    初始化：
        类的初始化步骤

1.2类的初始化时机
    创建类的实例
    类的静态变量或者为静态变量赋值
    类的静态方法
    使用反射方式强制创建某个类或接口对应的java.lang.Class对象
    初始化某个类的子类
    直接使用java.exe命令来运行某个主类

1.3 类的加载器
    负责将.class文件加载到内存中，并为之生成对印度个Class对象
    虽然我们不需要关心类加载机制，但是了解这个机制我们就能更好的理解
    程序的运行

1.4类加载器的组成
    Bootstrap ClassLoader 根类加载器
        也被称为引导类加载器，负责java核心类的加载
        比如System,String 等。再JDK中JRE的lib目录下的rt.jar文件中
    Extension ClassLoader 扩展类加载器
        负责JRE的扩展目录中jar包的加载。
        再JRE目录下ext目录
    System ClassLoader 系统类加载器
        负责在JVM启动时加载来自java命令的class文件，以及classpath环境
        变量所指定的jar包和类路径

                        反射
    java反射机制时在运行状态中，对任意一个类，都能知道这个类的所有属性
    和方法，对于任意一个对象，都能调用它的任意一个方法和属性，这种动态获取的信息以及
    动态调用对象的方法和功能称为java语言的反射机制。
2.1 Class类
    Class没有公共构造方法。Class对象时在加载类时由Java虚拟机以及通过调用
    类加载器中的defineClass方法自动构造的。

    获取Class对象的三种方式
    通过Object类中的getObject()方法
        Person p=new Person();
        Class c=p.getClass();
    通过类名.class获取到字节码文件对象（任意数据类型都具备一个class静态
    属性，看上去要比第一种简单）
    Class c2=Person.class;
    Class类的静态方法获取 forName（字符串类名）
    Class c3=Class.forName("Com.mysql.jdbc.Driver");

2.2通过反射获取文件中的构造方法以及运行（相当于创建对象）

    私有构造在使用前要setAccessible(true) 来取消权限检查
    Constructors [] getConstructors(); 得到所有公共构造
    Constructors [] getDeclaredConstructors(); 得到所有构造

    Constructor getConstructor()
    Constructor getDeclaredConstructor()

    Constructor<T> getConstructor(Class<?>...parameterTypes)
        传参数的class文件对象
    Constructor<T> getDeclaredConstructor(Class<?>...parameterTypes)
        传参数的class文件对象

    Constructor类下有类方法newInstance()可以运行获取到的构造方法
    newInstance(Object...initargs)
        Object...initargs运行构造方法后，传递的实际参数
        直接传入参数即可

    快捷方式：
    （前提：被反射的类必须有空参构造
        构造方法的权限必须是最大权限public）
    Object obj=c.newInstance();


2.3获取成员变量
    getFileds() 所有公共的成员变量
    getDeclaredFileds() 所有成员变量
    getFiled("成员变量名")
    getDeclaredFiled("成员变量名")


2.4修改成员变量
    私有成员变量需要setAccessible(true)
    void set(Object obj,Object value)
    obj是要设值的对象，value是值  。 成员变量Filed对象.set(对象，值)

2.5获取成员方法并运行
    Method[] getMethods() 返回class文件中所有公共成员方法，包括父类的
    Method[] getDeclaredMethods() 返回class文件中所有成员方法，包括父类的

    Method getMethod(String methodName,Class..c)
    获得指定方法，第一个参数是方法名，后面是参数
    Method getDeclaredMethod(String methodName,Class..c)
    获得指定方法，第一个参数是方法名，后面是参数

    执行：
    method.invoke（对象，参数列表）

2.6通过配置文件运行反射
    方便后期改需求，因为类名和方法名以键值对的形式存在配置文件
    需要哪个就把哪个取出来，因为反射创建对象和调用方法都是
    需要类名字符串和方法名字符串就可以了。

    实现步骤：
        准备配置文件，键值对
        IO流读取配置文件 Reader
        文件中的键值对存储到集合中
        反射获取制定类的class文件对象
        class文件对象获取指定的方法
        运行方法